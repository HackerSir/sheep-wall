#!/usr/bin/env ruby

$:.push File.expand_path "../lib", File.dirname(__FILE__)

require "rubygems"
require "bundler/setup"
Bundler.setup(:default)

require "redis"
require "sheep-wall"
require "digest"
require "json"
require "thread"

class RedisPush
  def initialize
    @history = {}
    @timestamps = []
    @redis = Redis.new url: ENV['REDIS_URL'] if ENV.key? "REDIS_URL"
    @lock = Mutex.new
    @purger = Thread.new do
      loop do
        @lock.synchronize do
          expire
        end
        sleep 60
      end
    end
  end

  def expire
    now = Time.now
    old = @timestamps.select { |k,ts| now - ts >= 300 }
    @timestamps -= old
    old.each { |k,ts| @history.delete k }
  end

  def show entity
    @lock.synchronize do
      return if entity[:cred].empty?
      return if @history.values.select { |v|
        v[:host].split(":").first.split(".")[-2..-1].join(".") == entity[:host].split(":").first.split(".")[-2..-1].join(".") and
        v[:cred] == entity[:cred]
      }.size > 0
    end
    fig = Digest::SHA1.hexdigest(entity.to_json)
    @history[fig] = entity
    @timestamps << [ fig , Time.now ]
    if @redis
      @redis.mapped_hmset fig, entity
      @redis.expire fig, 300
      @redis.publish "new-sheep", fig
    end
    p [fig, entity]
  end
end

cap = SheepWall::Capture.new ARGV[0] || "lo", ARGV[1] || "tcp"
cap.options << "wlan.enable_decryption:TRUE"
cap.options += File.readlines(ARGV[2]).map(&:chomp).reject(&:empty?) if ARGV[2]
cap.add_parser SheepWall::Parser::FTPParser
cap.add_parser SheepWall::Parser::SMTPParser
cap.add_parser SheepWall::Parser::HTTPParser
#cap.add_parser SheepWall::Parser::IMAPParser
cap.add_display RedisPush

begin

  loop { cap.start }

  rescue Interrupt
    exit

  rescue Exception => e
    p e
    sleep 1
    retry

end
